showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
graph_conso2
# map = tm_shape(world) + tm_polygons()
# class(map)
#> [1] "tmap"
library(plotly)
conso <- read.csv("./data/global-fossil-fuel-consumption.csv", header = TRUE)
colnames(conso) <- c("entity","code", "year", "charbon","petrol","gaz")
graph_conso2 <- plot_ly(conso, x = ~year, y = ~charbon, name = 'charbon', type = 'scatter', mode = 'none', stackgroup = 'one', fillcolor = '#F5FF8D') %>%
add_trace(y = ~petrol, name = 'Pétrole', fillcolor = '#50CB86') %>%
add_trace(y = ~gaz, name = 'gaz', fillcolor = '#4C74C9') %>%
layout(title = 'Consommation mondiale d énergie fossile en terawatt par heure',
xaxis = list(title = "année",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "Consommation en terawatt par heure",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
graph_conso2
library(plotly)
conso <- read.csv("./data/global-fossil-fuel-consumption.csv", header = TRUE)
colnames(conso) <- c("entity","code", "year", "charbon","petrol","gaz")
graph_conso2 <- plot_ly(conso, x = ~year, y = ~charbon, name = 'charbon', type = 'scatter', mode = 'none', stackgroup = 'one', fillcolor = '#F5FF8D') %>%
add_trace(y = ~petrol, name = 'Pétrole', fillcolor = '#50CB86') %>%
add_trace(y = ~gaz, name = 'gaz', fillcolor = '#4C74C9') %>%
layout(title = 'Consommation mondiale d énergie fossile en terawatt par heure',
xaxis = list(title = "année",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(title = "Consommation en terawatt par heure",
gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE))
graph_conso2
shiny::runApp()
library(ggplot2)
hiv_continent_graph_tot <- read.csv("datas/hiv_continent_graph_tot.csv", sep = ";", header = TRUE, encoding = "utf-8")
names(hiv_continent_graph_tot)
#Traitement des lignes et des colonnes
hiv_continent_graph_tot <-  hiv_continent_graph_tot[rowSums(is.na(hiv_continent_graph_tot)) != (ncol(hiv_continent_graph_tot)-6),]
#Traitement des lignes et des colonnes
hiv_continent_graph_tot <-  hiv_continent_graph_tot[rowSums(is.na(hiv_continent_graph_tot)) != (ncol(hiv_continent_graph_tot)-6),]
hiv_continent_graph_tot <- hiv_continent_graph_tot %>%
select(-c("Antiretroviral.therapy.coverage....of.people.living.with.HIV.",
"Antiretroviral.therapy.coverage.for.PMTCT....of.pregnant.women.living.with.HIV.",
"Current.health.expenditure....of.GDP."))
hiv_continent_graph_tot <- na.omit(hiv_continent_graph_tot)
hiv_continent_graph_tot <- as.data.frame(hiv_continent_graph_tot, stringsAsFactors=FALSE)
plot <- ggplot(hiv_continent, aes(x = year, y = "Adults..ages.15...and.children..0.14.years..living.with.HIV", colours = continent)) +
geom_point()
plot
plot
plot <- ggplot(hiv_continent, aes(x = year, y = "Adults..ages.15...and.children..0.14.years..living.with.HIV", colours = continent)) +
geom_point()
library(ggplot2)
hiv_continent_graph_tot <- read.csv("datas/hiv_continent_graph_tot.csv", sep = ";", header = TRUE, encoding = "utf-8")
library(ggplot2)
hiv_continent_graph_tot <- read.csv("datas/hiv_continent_graph_tot.csv", sep = ";", header = TRUE, encoding = "utf-8")
hiv_continent_graph_tot <- read.csv("data/hiv_continent_graph_tot.csv", sep = ";", header = TRUE, encoding = "utf-8")
names(hiv_continent_graph_tot)
#Traitement des lignes et des colonnes
hiv_continent_graph_tot <-  hiv_continent_graph_tot[rowSums(is.na(hiv_continent_graph_tot)) != (ncol(hiv_continent_graph_tot)-6),]
hiv_continent_graph_tot <- hiv_continent_graph_tot %>%
select(-c("Antiretroviral.therapy.coverage....of.people.living.with.HIV.",
"Antiretroviral.therapy.coverage.for.PMTCT....of.pregnant.women.living.with.HIV.",
"Current.health.expenditure....of.GDP."))
hiv_continent_graph_tot <- na.omit(hiv_continent_graph_tot)
hiv_continent_graph_tot <- as.data.frame(hiv_continent_graph_tot, stringsAsFactors=FALSE)
plot <- ggplot(hiv_continent, aes(x = year, y = "Adults..ages.15...and.children..0.14.years..living.with.HIV", colours = continent)) +
geom_point()
plot <- ggplot(hiv_continent_graph_tot, aes(x = year, y = "Adults..ages.15...and.children..0.14.years..living.with.HIV", colours = continent)) +
geom_point()
plot
runApp()
runApp()
library(tmap)
install.packages('tmap')
library(ggplot2)
prod <- read.csv('data/fossil-fuel-production-over-the-long-term.csv', sep = ',')
head(prod)
names(prod)
g1 = ggplot() + geom_sf(data = prod, aes(fill = Coal..terawatt.hours.)) +
geom_sf(data = nz_height) +
scale_x_continuous(breaks = c(170, 175))
g1 = ggplot() + geom_sf(data = prod, aes(fill = Coal..terawatt.hours.)) +
scale_x_continuous(breaks = c(170, 175))
g1
g1 = ggplot() + geom_sf(data = prod, aes(fill = Coal..terawatt.hours.)) +
geom_point() +
scale_x_continuous(breaks = c(170, 175))
g1
library(ggplot2)
prod <- read.csv('data/fossil-fuel-production-over-the-long-term.csv', sep = ',')
names(prod)
library(tmap)
data("World")
tm_shape(World) +
tm_polygons("HPI")
library(tmap)
data("World")
tmap_mode("view")
tm_shape(World) +
tm_polygons("HPI")
library(tmap)
data("World")
tmap_mode("view")
tm_shape(World) +
tm_polygons("HPI", 'economy')
tm_shape(World) +
tm_polygons("HPI", 'economy')+
tm_facets(sync = TRUE, ncol = 2)
tm_shape(World) +
tm_polygons(c("HPI", 'economy'))+
tm_facets(sync = TRUE, ncol = 2)
tm_shape(World) +
tm_polygons(c("HPI", 'economy'))+
tm_facets(sync = TRUE, ncol = 1)
tm_shape(World) +
tm_polygons(c("HPI", 'economy'))+
tm_facets(sync = FALSE, ncol = 1)
tm_shape(World) +
tm_polygons(c("HPI", 'economy'))
tm_shape(World) +
tm_polygons('economy')
head(prod)
head(prod.Coal..terawatt.hours.)
names(prod)
head(data)
head(World)
names(World)
tm_shape(World) +
tm_polygons('geometry')
tm_shape(World) +
tm_polygons('footprint')
runApp()
runApp()
names(prod)
tm_shape(World) +
tm_polygons(prod.Entity)
tm_shape(World) +
tm_polygons(prod$Entity)
library(tidyverse)
library(sf)
library(rvest)
library(stringr)
library(scales)
#library(viridis)
#============
# SCRAPE DATA
#============
df.oil <- read_html("https://en.wikipedia.org/wiki/List_of_countries_by_oil_production") %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
#====================
# CHANGE COLUMN NAMES
#====================
colnames(df.oil) <- c('rank', 'country', 'oil_bbl_per_day')
#=============================
# WRANGLE VARIABLES INTO SHAPE
#=============================
#----------------------------------
# COERCE 'rank' VARIABLE TO INTEGER
#----------------------------------
df.oil <- df.oil %>% mutate(rank = as.integer(rank))
df.oil %>% glimpse()
#---------------------------------------------------
# WRANGLE FROM CHARACTER TO NUMERIC: oil_bbl_per_day
#---------------------------------------------------
df.oil <- df.oil %>% mutate(oil_bbl_per_day = oil_bbl_per_day %>% str_replace_all(',','') %>% as.integer())
# inspect
df.oil %>% glimpse()
#===========================
#CREATE VARIABLE: 'opec_ind'
#===========================
df.oil <- df.oil %>% mutate(opec_ind = if_else(str_detect(country, 'OPEC'), 1, 0))
#=========================================================
# CLEAN UP 'country'
# - some country names are tagged as being OPEC countries
#   and this information is in the country name
# - we will strip this information out
#=========================================================
df.oil <- df.oil %>% mutate(country = country %>% str_replace(' \\(OPEC\\)', '') %>% str_replace('\\s{2,}',' '))
# inspect
df.oil %>% glimpse()
#------------------------------------------
# EXAMINE OPEC COUNTRIES
# - here, we'll just visually inspect
#   to make sure that the names are correct
#------------------------------------------
df.oil %>%
filter(opec_ind == 1) %>%
select(country)
#==================
# REORDER VARIABLES
#==================
df.oil <- df.oil %>% select(rank, country, opec_ind, oil_bbl_per_day)
df.oil %>% glimpse()
#========
# GET MAP
#========
map.world <- map_data('world')
df.oil
#==========================
# CHECK FOR JOIN MISMATCHES
#==========================
anti_join(df.oil, map.world, by = c('country' = 'region'))
# rank                           country opec_ind oil_bbl_per_day
# 1   67 Congo, Democratic Republic of the        0          20,000
# 2   47               Trinidad and Tobago        0          60,090
# 3   34            Sudan and  South Sudan        0         255,000
# 4   30            Congo, Republic of the        0         308,363
# 5   20                    United Kingdom        0         939,760
# 6    3                     United States        0       8,875,817
#=====================
# RECODE COUNTRY NAMES
#=====================
map.world %>%
group_by(region) %>%
summarise() %>%
print(n = Inf)
# UK
# USA
# Democratic Republic of the Congo
# Trinidad
# Sudan
# South Sudan
df.oil <- df.oil %>%  mutate(country = recode(country, `United States` = 'USA'
, `United Kingdom` = 'UK'
, `Congo, Democratic Republic of the` = 'Democratic Republic of the Congo'
, `Trinidad and Tobago` = 'Trinidad'
, `Sudan and South Sudan` = 'Sudan'
#, `Sudan and  South Sudan` = 'South Sudan'
, `Congo, Republic of the` = 'Republic of Congo'
)
)
#-----------------------
# JOIN DATASETS TOGETHER
#-----------------------
map.oil <- left_join( map.world, df.oil, by = c('region' = 'country'))
#=====
# PLOT
#=====
# BASIC (this is a first draft)
ggplot(map.oil, aes( x = long, y = lat, group = group )) +
geom_polygon(aes(fill = oil_bbl_per_day))
#=======================
# FINAL, FORMATTED DRAFT
#=======================
df.oil %>% filter(oil_bbl_per_day > 822675) %>% summarise(mean(oil_bbl_per_day))
# 3190373
df.oil %>% filter(oil_bbl_per_day < 822675) %>% summarise(mean(oil_bbl_per_day))
# 96581.08
ggplot(map.oil, aes( x = long, y = lat, group = group )) +
geom_polygon(aes(fill = oil_bbl_per_day)) +
scale_fill_gradientn(colours = c('#461863','#404E88','#2A8A8C','#7FD157','#F9E53F')
,values = scales::rescale(c(100,96581,822675,3190373,10000000))
,labels = comma
,breaks = c(100,96581,822675,3190373,10000000)
) +
guides(fill = guide_legend(reverse = T)) +
labs(fill = 'bbl/day'
,title = 'Oil Production by Country'
,subtitle = 'Barrels per day, 2016'
,x = NULL
,y = NULL) +
theme(text = element_text(family = 'Gill Sans', color = '#EEEEEE')
,plot.title = element_text(size = 28)
,plot.subtitle = element_text(size = 14)
,axis.ticks = element_blank()
,axis.text = element_blank()
,panel.grid = element_blank()
,panel.background = element_rect(fill = '#333333')
,plot.background = element_rect(fill = '#333333')
,legend.position = c(.18,.36)
,legend.background = element_blank()
,legend.key = element_blank()
) +
annotate(geom = 'text'
,label = 'Source: U.S. Energy Information Administration\nhttps://en.wikipedia.org/wiki/List_of_countries_by_oil_production'
,x = 18, y = -55
,size = 3
,family = 'Gill Sans'
,color = '#CCCCCC'
,hjust = 'left'
)
library(tidyverse)
library(sf)
library(rvest)
library(stringr)
library(scales)
#library(viridis)
#============
# SCRAPE DATA
#============
df.oil <- read_html("https://en.wikipedia.org/wiki/List_of_countries_by_oil_production") %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
#====================
# CHANGE COLUMN NAMES
#====================
colnames(df.oil) <- c('rank', 'country', 'oil_bbl_per_day')
#=============================
# WRANGLE VARIABLES INTO SHAPE
#=============================
#----------------------------------
# COERCE 'rank' VARIABLE TO INTEGER
#----------------------------------
df.oil <- df.oil %>% mutate(rank = as.integer(rank))
df.oil %>% glimpse()
#---------------------------------------------------
# WRANGLE FROM CHARACTER TO NUMERIC: oil_bbl_per_day
#---------------------------------------------------
df.oil <- df.oil %>% mutate(oil_bbl_per_day = oil_bbl_per_day %>% str_replace_all(',','') %>% as.integer())
# inspect
df.oil %>% glimpse()
#===========================
#CREATE VARIABLE: 'opec_ind'
#===========================
df.oil <- df.oil %>% mutate(opec_ind = if_else(str_detect(country, 'OPEC'), 1, 0))
#=========================================================
# CLEAN UP 'country'
# - some country names are tagged as being OPEC countries
#   and this information is in the country name
# - we will strip this information out
#=========================================================
df.oil <- df.oil %>% mutate(country = country %>% str_replace(' \\(OPEC\\)', '') %>% str_replace('\\s{2,}',' '))
# inspect
df.oil %>% glimpse()
#------------------------------------------
# EXAMINE OPEC COUNTRIES
# - here, we'll just visually inspect
#   to make sure that the names are correct
#------------------------------------------
df.oil %>%
filter(opec_ind == 1) %>%
select(country)
#==================
# REORDER VARIABLES
#==================
df.oil <- df.oil %>% select(rank, country, opec_ind, oil_bbl_per_day)
df.oil %>% glimpse()
#========
# GET MAP
#========
map.world <- map_data('world')
df.oil
#==========================
# CHECK FOR JOIN MISMATCHES
#==========================
anti_join(df.oil, map.world, by = c('country' = 'region'))
# rank                           country opec_ind oil_bbl_per_day
# 1   67 Congo, Democratic Republic of the        0          20,000
# 2   47               Trinidad and Tobago        0          60,090
# 3   34            Sudan and  South Sudan        0         255,000
# 4   30            Congo, Republic of the        0         308,363
# 5   20                    United Kingdom        0         939,760
# 6    3                     United States        0       8,875,817
#=====================
# RECODE COUNTRY NAMES
#=====================
map.world %>%
group_by(region) %>%
summarise() %>%
print(n = Inf)
# UK
# USA
# Democratic Republic of the Congo
# Trinidad
# Sudan
# South Sudan
df.oil <- df.oil %>%  mutate(country = recode(country, `United States` = 'USA'
, `United Kingdom` = 'UK'
, `Congo, Democratic Republic of the` = 'Democratic Republic of the Congo'
, `Trinidad and Tobago` = 'Trinidad'
, `Sudan and South Sudan` = 'Sudan'
#, `Sudan and  South Sudan` = 'South Sudan'
, `Congo, Republic of the` = 'Republic of Congo'
)
)
#-----------------------
# JOIN DATASETS TOGETHER
#-----------------------
map.oil <- left_join( map.world, df.oil, by = c('region' = 'country'))
#=====
# PLOT
#=====
# BASIC (this is a first draft)
ggplot(map.oil, aes( x = long, y = lat, group = group )) +
geom_polygon(aes(fill = oil_bbl_per_day))
#=======================
# FINAL, FORMATTED DRAFT
#=======================
df.oil %>% filter(oil_bbl_per_day > 822675) %>% summarise(mean(oil_bbl_per_day))
# 3190373
df.oil %>% filter(oil_bbl_per_day < 822675) %>% summarise(mean(oil_bbl_per_day))
# 96581.08
ggplot(df.oil, aes( x = long, y = lat, group = group )) +
geom_polygon(aes(fill = oil_bbl_per_day)) +
scale_fill_gradientn(colours = c('#461863','#404E88','#2A8A8C','#7FD157','#F9E53F')
,values = scales::rescale(c(100,96581,822675,3190373,10000000))
,labels = comma
,breaks = c(100,96581,822675,3190373,10000000)
) +
guides(fill = guide_legend(reverse = T)) +
labs(fill = 'bbl/day'
,title = 'Oil Production by Country'
,subtitle = 'Barrels per day, 2016'
,x = NULL
,y = NULL) +
theme(text = element_text(family = 'Gill Sans', color = '#EEEEEE')
,plot.title = element_text(size = 28)
,plot.subtitle = element_text(size = 14)
,axis.ticks = element_blank()
,axis.text = element_blank()
,panel.grid = element_blank()
,panel.background = element_rect(fill = '#333333')
,plot.background = element_rect(fill = '#333333')
,legend.position = c(.18,.36)
,legend.background = element_blank()
,legend.key = element_blank()
) +
annotate(geom = 'text'
,label = 'Source: U.S. Energy Information Administration\nhttps://en.wikipedia.org/wiki/List_of_countries_by_oil_production'
,x = 18, y = -55
,size = 3
,family = 'Gill Sans'
,color = '#CCCCCC'
,hjust = 'left'
)
df.oil <- read_html("https://en.wikipedia.org/wiki/List_of_countries_by_oil_production") %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
library(tidyverse)
library(sf)
install.packages('tidyverse')
names(prod)
tm_shape(prod$Entity) +
tm_polygons('Code')
tm_shape(prod.Entity) +
tm_polygons('Code')
tm_shape(prod.Entity)
tm_shape(prod$Entity)
tm_shape(prod$Entity)+
tm_borders()
tm_shape(World) +
tm_polygons("HPI", id = "iso_a3", popup.vars = TRUE)
names(World)
tm_shape(World) +
tm_polygons("HPI", id = "name", popup.vars = TRUE)
runApp()
shiny::runApp()
View(conso)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp('~/Cours/Perso/R/RShiny/first_app')
prod <- read.csv('data/fossil-fuel-production-over-the-long-term.csv', sep = ',')
library(mapview) # for interactive maps
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
